document.addEventListener('DOMContentLoaded', () => {
    // --- SELECTORES ---
    const mainAppUI = document.getElementById('main-app-ui');
    const appContainer = document.getElementById('app-container');
    const views = { 
        dashboard: document.getElementById('dashboard-view'), 
        schedule: document.getElementById('schedule-view'), 
        calendar: document.getElementById('calendar-view'), 
        settings: document.getElementById('settings-view'),
        details: document.getElementById('details-view'),
        form: document.getElementById('form-view'),
        grades: document.getElementById('grades-view'),
        zen: document.getElementById('zen-view'),
    };
    const onboarding = {
        container: document.getElementById('onboarding-container'),
        ripple: document.getElementById('onboarding-ripple'),
        steps: {
            step1: document.getElementById('setup-step-1'),
            step2: document.getElementById('setup-step-2'),
            step3: document.getElementById('setup-step-3'),
        },
        form: document.getElementById('setup-form'),
        usernameInput: document.getElementById('username-input'),
        commitmentName: document.getElementById('commitment-name'),
        fingerprintBtn: document.getElementById('fingerprint-btn'),
        tutorialCards: document.querySelectorAll('.tutorial-card'),
        startAppBtn: document.getElementById('start-app-btn'),
    };
    const buttons = {
        backToDashboard: document.getElementById('back-to-dashboard-btn'), editTask: document.getElementById('edit-task-btn'), cancelForm: document.getElementById('cancel-form-btn'), saveTask: document.getElementById('save-task-btn'),
        exportData: document.getElementById('export-btn'), importData: document.getElementById('import-btn'), resetApp: document.getElementById('reset-app-btn'),
        saveWallpaperUrl: document.getElementById('save-wallpaper-url-btn'), resetWallpaper: document.getElementById('reset-wallpaper-btn'),
        startZenSession: document.getElementById('start-zen-session-btn'), exitZen: document.getElementById('exit-zen-btn'),
        dashboardZen: document.getElementById('dashboard-zen-btn'),
        addSubject: document.getElementById('add-subject-btn'), cancelSubjectForm: document.getElementById('cancel-subject-form-btn'), saveSubject: document.getElementById('save-subject-btn'),
        calendarPrevMonth: document.getElementById('calendar-prev-month-btn'), calendarNextMonth: document.getElementById('calendar-next-month-btn'),
        backToSchedule: document.getElementById('back-to-schedule-btn'), editSubjectGrades: document.getElementById('edit-subject-grades-btn'), addGrade: document.getElementById('add-grade-btn'),
        cancelAddGrade: document.getElementById('cancel-add-grade-btn'),
        fabAddTask: document.getElementById('fab-add-task'),
    };
    const inputs = { importFile: document.getElementById('import-file-input'), wallpaperUrl: document.getElementById('wallpaper-url-input'), wallpaperFile: document.getElementById('wallpaper-file-input'), colorPicker: document.getElementById('color-picker') };
    const containers = {
        pendingTasks: document.getElementById('pending-tasks-container'), completedTasks: document.getElementById('completed-tasks-container'), taskDetails: document.getElementById('task-details-content'), subtasksFormList: document.getElementById('subtasks-form-list'),
        greetingText: document.getElementById('greeting-text'), dashboardSummary: document.getElementById('dashboard-summary'), motivationalQuote: document.getElementById('motivational-quote'),
        focusCard: document.getElementById('focus-card-container'), taskFilters: document.getElementById('task-filters'), streak: document.getElementById('streak-text'),
        scheduleList: document.getElementById('schedule-list-container'), calendarGrid: document.getElementById('calendar-grid'), calendarTitle: document.getElementById('calendar-title'), calendarTasks: document.getElementById('calendar-tasks-container'),
        scheduleDisplay: document.getElementById('schedule-display'), subjectFormContainer: document.getElementById('subject-form-container'),
        gradesSubjectTitle: document.getElementById('grades-subject-title'), gradesAverage: document.getElementById('grades-average'), gradesList: document.getElementById('grades-list-container'),
        todaysSchedule: document.getElementById('todays-schedule-container'),
    };
    const formElements = {
        form: document.getElementById('task-form'), formTitle: document.getElementById('form-title'), taskIdInput: document.getElementById('task-id-input'), title: document.getElementById('task-title'),
        description: document.getElementById('task-description'), dueDate: document.getElementById('task-due-date'), priority: document.getElementById('task-priority'), tags: document.getElementById('task-tags'),
        subjectForm: document.getElementById('subject-form'), subjectFormTitle: document.getElementById('subject-form-title'), subjectIdInput: document.getElementById('subject-id-input'),
        subjectName: document.getElementById('subject-name'), subjectDay: document.getElementById('subject-day'), subjectStartTime: document.getElementById('subject-start-time'), subjectEndTime: document.getElementById('subject-end-time'),
        addGradeForm: document.getElementById('add-grade-form'), gradeNameInput: document.getElementById('grade-name-input'), gradeValueInput: document.getElementById('grade-value-input'),
    };
    const modal = { 
        subtask: { element: document.getElementById('subtask-modal'), input: document.getElementById('subtask-input'), confirmBtn: document.getElementById('confirm-add-subtask-btn'), cancelBtn: document.getElementById('cancel-add-subtask-btn'), addBtnForm: document.getElementById('add-subtask-form-btn') },
        grade: { element: document.getElementById('add-grade-modal') }
    };
    const zen = {
        timerDisplay: document.getElementById('zen-timer-display'), statusText: document.getElementById('zen-status-text'), canvas: document.getElementById('zen-canvas'),
        progressRing: document.getElementById('zen-progress-ring'), progressBg: document.getElementById('zen-progress-bg'),
        borderTop: document.getElementById('border-top'), borderRight: document.getElementById('border-right'), borderBottom: document.getElementById('border-bottom'), borderLeft: document.getElementById('border-left'),
        pomodoroDurationInput: document.getElementById('zen-pomodoro-duration'), shortBreakDurationInput: document.getElementById('zen-short-break-duration'), longBreakDurationInput: document.getElementById('zen-long-break-duration'),
        soundSelector: document.getElementById('zen-sound-selector'), volumeSlider: document.getElementById('zen-volume-slider'),
        confirmLogModal: document.getElementById('confirm-zen-log-modal'), confirmLogContent: document.getElementById('confirm-zen-log-content')
    };
    const achievementToast = { element: document.getElementById('achievement-toast'), content: document.getElementById('achievement-toast-content') };

    // --- ESTADO Y LÓGICA DE DATOS (MODIFICADO) ---
    let unifiedData = getUnifiedData();
    let state = unifiedData.myTime; // Trabajar con la porción de MyTime

    const dataService = {
        async saveData(appState) {
            unifiedData.myTime = appState; // Actualizar la porción de MyTime
            saveUnifiedData(unifiedData); // Guardar el objeto completo
        }
    };

    // --- LÓGICA DEL SCRIPT.JS ORIGINAL (adaptada) ---
    const motivationalQuotes = [ "El secreto para salir adelante es empezar.", "La disciplina es el puente entre las metas y los logros.", "No mires el reloj; haz lo que él hace. Sigue moviéndote." ];
    const sounds = [ { id: 'rain', name: 'Lluvia Ligera', element: document.getElementById('audio-rain') }, { id: 'forest', name: 'Bosque', element: document.getElementById('audio-whitenoise') }, { id: 'whitenoise', name: 'Ruido Blanco', element: document.getElementById('audio-whitenoise') } ];
    let countdownInterval = null;
    let zenState = { timerId: null, particleAnimationId: null, currentSound: null };
    
    const achievementDefs = { 'focusMaster': { name: 'Maestro del Enfoque', description: 'Completa 10 sesiones Pomodoro.', icon: '🏆', condition: (s) => s.gamification.pomodoroCount >= 10 }, 'firstStep': { name: 'Primer Paso', description: 'Completa tu primera tarea.', icon: '🎉', condition: (s) => s.tasks.some(t => t.completed) }, 'weekStreak': { name: 'Imparable', description: 'Mantén una racha de 7 días.', icon: '🚀', condition: (s) => s.gamification.streak >= 7 } };
    async function checkAchievements() { let unlocked = false; for (const id in achievementDefs) { if (!state.gamification.achievements.includes(id) && achievementDefs[id].condition(state)) { state.gamification.achievements.push(id); showAchievementToast(achievementDefs[id]); unlocked = true; } } if (unlocked) await dataService.saveData(state); }
    function showAchievementToast(achievement) { achievementToast.content.innerHTML = `<span class="text-3xl">${achievement.icon}</span><div><h3 class="font-bold text-lg">${achievement.name}</h3><p class="text-sm">${achievement.description}</p></div>`; achievementToast.element.style.setProperty('--accent-primary', state.zenSettings.color); achievementToast.element.classList.add('show'); setTimeout(() => achievementToast.element.classList.remove('show'), 5000); }
    async function updateStreak() { const today = new Date().toISOString().split('T')[0]; if (state.gamification.lastCompletionDate !== today) { const yesterday = new Date(); yesterday.setDate(yesterday.getDate() - 1); state.gamification.streak = state.gamification.lastCompletionDate === yesterday.toISOString().split('T')[0] ? state.gamification.streak + 1 : 1; state.gamification.lastCompletionDate = today; await dataService.saveData(state); await checkAchievements(); } }
    
    async function exportData() { 
        alert("La exportación de datos ahora se realiza desde el Hub principal.");
    }
    
    function importData(event) {
        alert("La importación de datos ahora se realiza desde el Hub principal.");
    }

    async function resetApp() {
        if(confirm("¡ADVERTENCIA! Se borrarán todos los datos de MyTime.")) {
            const defaultState = getDefaultUnifiedState();
            state = defaultState.myTime; // Resetear solo la parte de MyTime
            await dataService.saveData(state);
            location.reload();
        }
    }

    function applyAppearance() { document.body.style.backgroundImage = `url('${state.wallpaper || "https://raw.githubusercontent.com/lucasromerodb/liquid-glass-effect-macos/refs/heads/main/assets/flowers.jpg"}')`; document.documentElement.style.setProperty('--accent-primary', state.zenSettings.color); if(inputs.colorPicker) inputs.colorPicker.value = state.zenSettings.color; }
    async function getDominantColor(imageUrl) { return new Promise((resolve, reject) => { const img = new Image(); img.crossOrigin = 'Anonymous'; img.src = imageUrl; img.onload = () => { const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d'); canvas.width = img.width; canvas.height = img.height; ctx.drawImage(img, 0, 0); let imageData; try { imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data; } catch (e) { reject(new Error("Could not get image data.")); return; } const colorCounts = {}; let maxCount = 0; let dominantColor = null; for (let i = 0; i < imageData.length; i += 20) { const r = imageData[i], g = imageData[i + 1], b = imageData[i + 2]; const luminance = 0.299 * r + 0.587 * g + 0.114 * b; const saturation = Math.max(r, g, b) - Math.min(r, g, b); if (luminance < 40 || luminance > 215 || saturation < 20) continue; const color = `rgb(${r},${g},${b})`; colorCounts[color] = (colorCounts[color] || 0) + 1; if (colorCounts[color] > maxCount) { maxCount = colorCounts[color]; dominantColor = color; } } if (dominantColor) { const [r, g, b] = dominantColor.match(/\d+/g).map(Number); resolve(`#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`); } else { resolve('#00F0FF'); } }; img.onerror = () => reject(new Error("Could not load image.")); }); }
    async function handleWallpaperUrl() { const url = inputs.wallpaperUrl.value.trim(); if (url) { state.wallpaper = url; applyAppearance(); try { const color = await getDominantColor(url); state.zenSettings.color = color; applyAppearance(); } catch (e) { console.error(e); } await dataService.saveData(state); } }
    function handleWallpaperFile(event) { const file = event.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = async e => { state.wallpaper = e.target.result; applyAppearance(); try { const color = await getDominantColor(e.target.result); state.zenSettings.color = color; applyAppearance(); } catch (e) { console.error(e); } await dataService.saveData(state); }; reader.readAsDataURL(file); }
    async function resetWallpaper() { state.wallpaper = null; state.zenSettings.color = '#00F0FF'; await dataService.saveData(state); applyAppearance(); inputs.wallpaperUrl.value = ''; inputs.wallpaperFile.value = ''; }

    function enterFullscreen(element) { if (element.requestFullscreen) element.requestFullscreen(); else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen(); }
    function exitFullscreen() { if (document.exitFullscreen) document.exitFullscreen(); else if (document.webkitExitFullscreen) document.webkitExitFullscreen(); }
    function handleFullscreenChange() { if (!document.fullscreenElement && views.zen.classList.contains('active')) stopZenMode(); }
    function showHiddenView(viewId) { if (views[viewId]) views[viewId].classList.add('active'); }
    function hideHiddenView(viewId) { if (views[viewId]) views[viewId].classList.remove('active'); }
    function setupScrollNavigation() {
        const navViews = document.querySelectorAll('#app-container > .view:not(.hidden-view)');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (countdownInterval) { clearInterval(countdownInterval); countdownInterval = null; }
                    const id = entry.target.id;
                    if (id === 'dashboard-view') renderDashboard();
                    else if (id === 'schedule-view') renderSchedule();
                    else if (id === 'calendar-view') renderCalendar();
                    else if (id === 'settings-view') renderSettings();
                }
            });
        }, { threshold: 0.6 });
        navViews.forEach(view => observer.observe(view));
    }
    
    function updateCountdownTimers() { document.querySelectorAll('.task-countdown').forEach(timer => { if (!timer.dataset.dueDate) return; const diff = new Date(timer.dataset.dueDate) - new Date(); if (diff <= 0) { timer.innerHTML = `<span style="color: var(--danger-color);" class="font-bold">Vencido</span>`; return; } const d = Math.floor(diff / 864e5), h = Math.floor((diff % 864e5) / 36e5), m = Math.floor((diff % 36e5) / 6e4), s = Math.floor((diff % 6e4) / 1e3); timer.textContent = `Faltan: ${d > 0 ? d + 'd ' : ''}${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`; }); document.querySelectorAll('.schedule-countdown').forEach(timer => { const now = new Date(); const todayStr = now.toISOString().split('T')[0]; const startTime = new Date(`${todayStr}T${timer.dataset.startTime}`); const endTime = new Date(`${todayStr}T${timer.dataset.endTime}`); let diff, prefix; if (now < startTime) { diff = startTime - now; prefix = 'Empieza en'; timer.style.color = 'var(--text-secondary)'; } else if (now >= startTime && now <= endTime) { diff = endTime - now; prefix = 'Finaliza en'; timer.style.color = 'var(--accent-primary)'; } else { timer.textContent = 'Finalizada'; timer.style.color = 'var(--danger-color)'; return; } const h = Math.floor((diff % 864e5) / 36e5), m = Math.floor((diff % 36e5) / 6e4), s = Math.floor((diff % 6e4) / 1e3); timer.textContent = `${prefix} ${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`; }); }
    function startCountdownTimers() { if (!countdownInterval) { updateCountdownTimers(); countdownInterval = setInterval(updateCountdownTimers, 1000); } }
    function createProgressCircle(percentage, size = 40) { const sW = size / 10, r = (size / 2) - (sW / 2), c = 2 * Math.PI * r, o = c - (percentage / 100) * c; return `<svg style="width:${size}px; height:${size}px;" viewBox="0 0 ${size} ${size}"><circle stroke-width="${sW}" stroke="rgba(255,255,255,0.3)" fill="transparent" r="${r}" cx="${size/2}" cy="${size/2}"/><circle stroke-width="${sW}" stroke-dasharray="${c}" stroke-dashoffset="${o}" stroke-linecap="round" stroke="var(--text-primary)" fill="transparent" r="${r}" cx="${size/2}" cy="${size/2}" style="transition: stroke-dashoffset 0.5s ease; transform: rotate(-90deg); transform-origin: center;"/><text x="50%" y="50%" text-anchor="middle" dy=".3em" class="font-bold" style="fill: var(--text-primary); font-size: ${size / 4.5}px;">${Math.round(percentage)}%</text></svg>`; }
    function createTaskCard(task) { let progress = 0, statusText = ''; if (task.subtasks.length > 0) { const completed = task.subtasks.filter(st => st.completed).length; progress = (completed / task.subtasks.length) * 100; statusText = `${completed}/${task.subtasks.length}`; } else { progress = task.completed ? 100 : 0; statusText = task.completed ? '¡Hecho!' : 'Simple'; } const card = document.createElement('div'); card.className = `task-card glass-pane p-4 priority-${task.priority}`; card.dataset.taskId = task.id; let timeInfoHTML = ''; if(task.dueDate && !task.completed) { timeInfoHTML = `<p class="text-sm text-secondary">Entrega: ${new Date(task.dueDate).toLocaleString('es-ES', { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' })}</p><p class="text-sm font-semibold task-countdown" data-due-date="${task.dueDate}"></p>`; } else { timeInfoHTML = `<p class="text-sm text-secondary">${task.completed ? 'Completado' : 'Sin fecha'}</p>`; } const tagsHTML = !task.completed ? task.tags.map(tag => `<span class="tag">${tag}</span>`).join('') : ''; card.innerHTML = `<div class="flex justify-between items-center"><div class="flex-grow mr-4 min-w-0"><h3 class="font-bold text-lg break-words ${task.completed ? 'line-through text-secondary' : ''}">${task.title}</h3>${timeInfoHTML}<div class="flex gap-2 mt-2 flex-wrap">${tagsHTML}</div></div><div class="flex-shrink-0 flex flex-col items-center justify-center">${createProgressCircle(progress, 60)}<span class="text-xs font-semibold mt-1">${statusText}</span></div></div>`; card.addEventListener('click', () => { state.selectedTaskId = task.id; renderTaskDetails(); showHiddenView('details'); }); return card; }
    function renderDashboard() { if(!containers.greetingText) return; containers.greetingText.textContent = `Hola, ${state.userName}!`; const pendingCount = state.tasks.filter(t => !t.completed).length; containers.dashboardSummary.textContent = pendingCount > 0 ? `Tienes ${pendingCount} tarea${pendingCount > 1 ? 's' : ''} pendiente${pendingCount > 1 ? 's' : ''}.` : '¡No tienes tareas pendientes!'; containers.motivationalQuote.textContent = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)]; containers.streak.textContent = `${state.gamification.streak} día${state.gamification.streak !== 1 ? 's' : ''}`; renderTodaysSchedule(); renderTaskFilters(); renderFocusCard(); const activeTasks = state.tasks.filter(t => !t.completed).sort((a, b) => (a.dueDate && b.dueDate) ? new Date(a.dueDate) - new Date(b.dueDate) : a.dueDate ? -1 : 1); const completedTasks = state.tasks.filter(t => t.completed).sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt)); const filteredTasks = activeTasks.filter(t => (state.filters.priority === 'all' || t.priority === state.filters.priority) && (state.filters.tag === 'all' || t.tags.includes(state.filters.tag))); containers.pendingTasks.innerHTML = ''; if (filteredTasks.length > 0) { filteredTasks.forEach(task => containers.pendingTasks.appendChild(createTaskCard(task))); } else { containers.pendingTasks.innerHTML = `<div class="glass-pane p-6 text-center col-span-full"><h3 class="font-heading text-xl uppercase">Todo en orden</h3><p class="mt-1 text-sm text-secondary">No hay tareas que coincidan con tus filtros.</p></div>`; } containers.completedTasks.innerHTML = ''; if (completedTasks.length > 0) { completedTasks.forEach(task => containers.completedTasks.appendChild(createTaskCard(task))); } else { containers.completedTasks.innerHTML = `<div class="glass-pane p-6 text-center col-span-full"><h3 class="font-heading text-xl uppercase">Aún no hay nada aquí</h3><p class="mt-1 text-sm text-secondary">Completa algunas tareas para verlas aquí.</p></div>`; } startCountdownTimers(); }
    function renderTodaysSchedule() { if(!containers.todaysSchedule) return; const today = new Date().getDay(); const todaysClasses = state.schedule.filter(s => s.day == today).sort((a, b) => a.startTime.localeCompare(b.startTime)); if (todaysClasses.length === 0) { containers.todaysSchedule.innerHTML = `<div class="glass-pane p-6 text-center"><h3 class="font-heading text-xl uppercase">Día Libre</h3><p class="mt-1 text-sm text-secondary">No tienes clases programadas para hoy. ¡Disfruta!</p></div>`; } else { containers.todaysSchedule.innerHTML = todaysClasses.map(subject => `<div class="glass-pane p-4 schedule-card"><h3 class="font-bold text-lg">${subject.name}</h3><p class="text-sm text-secondary">${subject.startTime} - ${subject.endTime}</p><p class="text-sm font-semibold schedule-countdown mt-2" data-start-time="${subject.startTime}" data-end-time="${subject.endTime}"></p></div>`).join(''); } }
    function renderFocusCard() { if(!containers.focusCard) return; containers.focusCard.innerHTML = ''; const focusTask = state.tasks.filter(t => !t.completed && t.dueDate).sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))[0]; if (focusTask) { const card = createTaskCard(focusTask); card.classList.add('focus-card', 'glass-pane-light'); containers.focusCard.appendChild(card); } else { containers.focusCard.innerHTML = `<div class="glass-pane glass-pane-light p-6 text-center"><h3 class="font-heading text-xl uppercase">Todo tranquilo</h3><p class="mt-1 text-sm text-secondary">No hay tareas urgentes. ¡Disfruta o añade un proyecto!</p></div>`; } }
    function renderTaskFilters() { if(!containers.taskFilters) return; const allTags = [...new Set(state.tasks.flatMap(t => t.tags))]; containers.taskFilters.innerHTML = `<select id="priority-filter" class="input-field !py-1 !w-auto"><option value="all">Prioridad</option><option value="high">Alta</option><option value="medium">Media</option><option value="low">Baja</option></select><select id="tag-filter" class="input-field !py-1 !w-auto"><option value="all">Etiqueta</option>${allTags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}</select>`; const priorityFilter = document.getElementById('priority-filter'), tagFilter = document.getElementById('tag-filter'); priorityFilter.value = state.filters.priority; tagFilter.value = state.filters.tag; priorityFilter.addEventListener('change', (e) => { state.filters.priority = e.target.value; renderDashboard(); }); tagFilter.addEventListener('change', (e) => { state.filters.tag = e.target.value; renderDashboard(); }); }
    async function renderTaskDetails() { if(!containers.taskDetails) return; const task = state.tasks.find(t => t.id === state.selectedTaskId); if (!task) return; let progress = 0; if (task.subtasks.length > 0) { const completed = task.subtasks.filter(st => st.completed).length; progress = (completed / task.subtasks.length) * 100; } else { progress = task.completed ? 100 : 0; } let detailsHTML = `<div class="flex flex-col items-center w-full"><div class="mb-6">${createProgressCircle(progress, 120)}</div><h2 class="font-heading text-3xl md:text-5xl uppercase mb-2 text-center break-words ${task.completed ? 'line-through text-secondary' : ''}">${task.title}</h2><div class="text-sm text-secondary mb-2 text-center">Prioridad: <span class="font-bold">${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}</span></div>${task.tags.length > 0 && !task.completed ? `<div class="flex gap-2 justify-center flex-wrap mb-6">${task.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}</div>` : ''}<p class="mb-8 text-center w-full max-w-2xl">${task.description || '<em>Sin descripción.</em>'}</p><div class="w-full border-t-2 border-white/20 pt-6">`; if (task.subtasks.length > 0) { const comp = task.subtasks.filter(st => st.completed).length; const total = task.subtasks.length; const subsHTML = task.subtasks.map(st => `<div class="subtask-item flex items-center gap-4 p-3 border-b-2 border-white/10" draggable="true" data-subtask-id="${st.id}"><span class="drag-handle text-secondary cursor-move">⠿</span><input type="checkbox" id="subtask-${st.id}" data-subtask-id="${st.id}" class="custom-checkbox" ${st.completed ? 'checked' : ''}><label for="subtask-${st.id}" class="flex-1 ${st.completed ? 'line-through text-secondary' : ''}">${st.text}</label></div>`).join(''); detailsHTML += `<h3 class="font-heading text-xl uppercase mb-4">Progreso (${comp}/${total})</h3><div id="subtasks-details-list">${subsHTML}</div><button id="add-subtask-details-btn" class="mt-4 btn text-sm">+ Añadir subtarea</button>`; } else { detailsHTML += `<div class="flex justify-center"><label for="complete-task-checkbox" class="flex items-center gap-4 cursor-pointer"><input type="checkbox" id="complete-task-checkbox" class="custom-checkbox w-8 h-8" ${task.completed ? 'checked' : ''}><span class="text-xl font-bold">Marcar como completada</span></label></div>`; } detailsHTML += `</div></div>`; containers.taskDetails.innerHTML = detailsHTML; setupSubtaskDragAndDrop('subtasks-details-list', task.id); if (task.subtasks.length > 0) { document.querySelectorAll('#subtasks-details-list input[type="checkbox"]').forEach(cb => { cb.addEventListener('change', async e => { const subtask = task.subtasks.find(st => st.id === e.target.dataset.subtaskId); if(subtask) { subtask.completed = e.target.checked; task.completed = task.subtasks.every(st => st.completed); if (task.completed) { task.completedAt = new Date().toISOString(); await updateStreak(); } await dataService.saveData(state); await renderTaskDetails(); } }); }); document.getElementById('add-subtask-details-btn').addEventListener('click', () => { openSubtaskModal(); }); } else { document.getElementById('complete-task-checkbox').addEventListener('change', async e => { task.completed = e.target.checked; if (task.completed) { task.completedAt = new Date().toISOString(); await updateStreak(); } await dataService.saveData(state); await renderTaskDetails(); }); } }
    function renderFormSubtasks() { containers.subtasksFormList.innerHTML = state.tempSubtasks.map((st, i) => `<div class="subtask-item flex items-center justify-between p-2 rounded-lg" style="background: rgba(0,0,0,0.2);" draggable="true" data-index="${i}"><span class="drag-handle text-secondary cursor-move">⠿</span><span class="flex-1 px-2 text-secondary">${st.text}</span><button type="button" class="font-bold text-red-500 px-2" data-index="${i}">×</button></div>`).join(''); containers.subtasksFormList.querySelectorAll('button').forEach(btn => btn.addEventListener('click', e => { state.tempSubtasks.splice(e.target.dataset.index, 1); renderFormSubtasks(); })); setupSubtaskDragAndDrop('subtasks-form-list'); }
    function renderSettings() { if(!zen.pomodoroDurationInput) return; zen.pomodoroDurationInput.value = state.zenSettings.pomodoro; zen.shortBreakDurationInput.value = state.zenSettings.shortBreak; zen.longBreakDurationInput.value = state.zenSettings.longBreak; inputs.colorPicker.value = state.zenSettings.color; inputs.wallpaperUrl.value = (state.wallpaper && !state.wallpaper.startsWith('data:')) ? state.wallpaper : ''; }
    function setupSubtaskDragAndDrop(containerId, taskId = null) { const list = document.getElementById(containerId); if(!list) return; let draggedItem = null; list.addEventListener('dragstart', e => { draggedItem = e.target.closest('.subtask-item'); setTimeout(() => draggedItem?.classList.add('dragging'), 0); }); list.addEventListener('dragend', () => { draggedItem?.classList.remove('dragging'); draggedItem = null; }); list.addEventListener('dragover', e => { e.preventDefault(); const afterElement = [...list.querySelectorAll('.subtask-item:not(.dragging)')].reduce((closest, child) => { const box = child.getBoundingClientRect(); const offset = e.clientY - box.top - box.height / 2; return (offset < 0 && offset > closest.offset) ? { offset: offset, element: child } : closest; }, { offset: Number.NEGATIVE_INFINITY }).element; const currentDragged = document.querySelector('.dragging'); if (afterElement == null) { list.appendChild(currentDragged); } else { list.insertBefore(currentDragged, afterElement); } }); list.addEventListener('drop', async e => { e.preventDefault(); const newOrder = Array.from(list.querySelectorAll('.subtask-item')).map(item => taskId ? item.dataset.subtaskId : parseInt(item.dataset.index)); if (taskId) { const task = state.tasks.find(t => t.id === taskId); if (task) { task.subtasks.sort((a, b) => newOrder.indexOf(a.id) - newOrder.indexOf(b.id)); await dataService.saveData(state); } } else { state.tempSubtasks.sort((a, b) => newOrder.indexOf(state.tempSubtasks.indexOf(a)) - newOrder.indexOf(state.tempSubtasks.indexOf(b))); } }); }
    function openSubtaskModal() { modal.subtask.element.style.zIndex = '200'; modal.subtask.element.classList.add('active'); modal.subtask.input.value = ''; modal.subtask.input.focus(); }
    function closeSubtaskModal() { modal.subtask.element.classList.remove('active'); }
    async function handleAddSubtask() { const text = modal.subtask.input.value.trim(); if (!text) return; if (views.form.classList.contains('active')) { state.tempSubtasks.push({ text, completed: false }); renderFormSubtasks(); } else { const task = state.tasks.find(t => t.id === state.selectedTaskId); if (task) { task.subtasks.push({ id: `sub-${Date.now()}`, text, completed: false }); await dataService.saveData(state); await renderTaskDetails(); } } closeSubtaskModal(); }
    function openNewTaskForm() { state.selectedTaskId = null; formElements.form.reset(); formElements.form.querySelector('#save-task-btn').textContent = 'Crear Proyecto'; formElements.formTitle.textContent = 'Nuevo Proyecto'; state.tempSubtasks = []; renderFormSubtasks(); showHiddenView('form'); }
    function openEditTaskForm(taskId) { const task = state.tasks.find(t => t.id === taskId); if (!task) return; state.selectedTaskId = taskId; formElements.form.reset(); formElements.form.querySelector('#save-task-btn').textContent = 'Guardar Cambios'; formElements.formTitle.textContent = 'Editar Proyecto'; formElements.title.value = task.title; formElements.description.value = task.description; if (task.dueDate) { formElements.dueDate.value = new Date(new Date(task.dueDate).getTime() - new Date().getTimezoneOffset() * 60000).toISOString().slice(0, 16); } formElements.priority.value = task.priority || 'medium'; formElements.tags.value = task.tags ? task.tags.join(', ') : ''; state.tempSubtasks = JSON.parse(JSON.stringify(task.subtasks)); renderFormSubtasks(); showHiddenView('form'); }
    function showSubjectForm(show) { if(!containers.subjectFormContainer) return; containers.subjectFormContainer.style.display = show ? 'block' : 'none'; containers.scheduleDisplay.style.display = show ? 'none' : 'block'; }
    function renderSchedule() { if(!containers.scheduleList) return; showSubjectForm(false); containers.scheduleList.innerHTML = ''; if (state.schedule.length === 0) { containers.scheduleList.innerHTML = `<div class="text-center p-4"><h3 class="font-heading text-xl uppercase">Horario Vacío</h3><p class="mt-1 text-sm text-secondary">Añade tu primera materia para empezar.</p></div>`; return; } const days = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado']; const scheduleByDay = days.map((_, dayIndex) => state.schedule.filter(s => s.day == dayIndex).sort((a,b) => a.startTime.localeCompare(b.startTime))); days.forEach((dayName, dayIndex) => { if (scheduleByDay[dayIndex].length > 0) { const dayGroup = document.createElement('div'); dayGroup.className = 'schedule-day-group'; let dayHTML = `<h3 class="font-heading text-2xl uppercase pb-2 border-b-2 border-white/20 mb-4">${dayName}</h3><div class="space-y-3">`; scheduleByDay[dayIndex].forEach(s => { dayHTML += `<div class="glass-pane p-4 flex justify-between items-center cursor-pointer" data-subject-id="${s.id}"><span class="font-bold">${s.name}</span><span class="text-secondary font-semibold">${s.startTime} - ${s.endTime}</span></div>`; }); dayHTML += `</div>`; dayGroup.innerHTML = dayHTML; containers.scheduleList.appendChild(dayGroup); } }); containers.scheduleList.querySelectorAll('[data-subject-id]').forEach(el => el.addEventListener('click', (e) => { state.selectedSubjectId = e.currentTarget.dataset.subjectId; renderGrades(); showHiddenView('grades'); })); }
    function openNewSubjectForm() { state.selectedSubjectId = null; formElements.subjectForm.reset(); formElements.subjectFormTitle.textContent = 'Nueva Materia'; buttons.saveSubject.textContent = 'Añadir Materia'; showSubjectForm(true); }
    function openEditSubjectForm() { const subject = state.schedule.find(s => s.id === state.selectedSubjectId); if (!subject) return; hideHiddenView('grades'); views.schedule.scrollIntoView({ behavior: 'smooth' }); setTimeout(() => { formElements.subjectForm.reset(); formElements.subjectFormTitle.textContent = 'Editar Materia'; buttons.saveSubject.textContent = 'Guardar Cambios'; formElements.subjectName.value = subject.name; formElements.subjectDay.value = subject.day; formElements.subjectStartTime.value = subject.startTime; formElements.subjectEndTime.value = subject.endTime; showSubjectForm(true); }, 450); }
    function renderGrades() { if(!containers.gradesSubjectTitle) return; const subject = state.schedule.find(s => s.id === state.selectedSubjectId); if (!subject) { hideHiddenView('grades'); return; } containers.gradesSubjectTitle.textContent = subject.name; if (!subject.grades || subject.grades.length === 0) { containers.gradesAverage.textContent = 'Sin calificaciones'; containers.gradesList.innerHTML = `<div class="text-center p-4"><p class="text-secondary">Aún no has añadido ninguna calificación.</p></div>`; } else { const total = subject.grades.reduce((sum, grade) => sum + grade.value, 0); const average = total / subject.grades.length; containers.gradesAverage.textContent = `Promedio: ${average.toFixed(2)} / Suma: ${total.toFixed(2)}`; containers.gradesList.innerHTML = subject.grades.map((grade, index) => `<div class="glass-pane p-4 flex justify-between items-center cursor-pointer grade-item" data-grade-index="${index}"><span class="font-bold">${grade.name}</span><span class="text-secondary font-semibold text-xl">${grade.value.toFixed(2)}</span></div>`).join(''); containers.gradesList.querySelectorAll('.grade-item').forEach(item => { item.addEventListener('click', async (e) => { const gradeIndex = parseInt(e.currentTarget.dataset.gradeIndex); const gradeName = subject.grades[gradeIndex].name; if (confirm(`¿Estás seguro de que quieres eliminar la calificación "${gradeName}"?`)) { subject.grades.splice(gradeIndex, 1); await dataService.saveData(state); renderGrades(); } }); }); } }
    function renderCalendar() { if(!containers.calendarGrid) return; const calDate = new Date(state.calendarDate); const y = calDate.getFullYear(), m = calDate.getMonth(); containers.calendarTitle.textContent = calDate.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' }).toUpperCase(); const firstDay = new Date(y, m, 1).getDay(); const daysInMonth = new Date(y, m + 1, 0).getDate(); containers.calendarGrid.innerHTML = ['D', 'L', 'M', 'X', 'J', 'V', 'S'].map(d => `<div class="font-bold text-secondary">${d}</div>`).join(''); for (let i = 0; i < firstDay; i++) containers.calendarGrid.innerHTML += `<div></div>`; const tasksByDate = {}; state.tasks.forEach(task => { if(task.dueDate){ const date = task.dueDate.split('T')[0]; if(!tasksByDate[date]) tasksByDate[date] = []; tasksByDate[date].push(task); }}); const today = new Date(); const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`; for (let day = 1; day <= daysInMonth; day++) { const el = document.createElement('div'); const fullDate = `${y}-${String(m + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`; el.textContent = day; el.dataset.date = fullDate; if (fullDate === todayStr) el.classList.add('today'); if (tasksByDate[fullDate]) el.classList.add('has-task'); el.addEventListener('click', () => { document.querySelectorAll('#calendar-grid > div').forEach(d => d.classList.remove('selected')); el.classList.add('selected'); renderTasksForDay(fullDate, tasksByDate[fullDate] || []); }); containers.calendarGrid.appendChild(el); } }
    function renderTasksForDay(dateStr, tasks) { if(!containers.calendarTasks) return; const date = new Date(dateStr + 'T00:00:00'); containers.calendarTasks.innerHTML = `<h3 class="font-heading text-xl uppercase mb-2">Tareas para el ${date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric' })}</h3>`; if(tasks.length > 0) { containers.calendarTasks.innerHTML += tasks.map(task => `<div class="glass-pane p-3 cursor-pointer" data-task-id="${task.id}">${task.title}</div>`).join(''); containers.calendarTasks.querySelectorAll('[data-task-id]').forEach(el => el.addEventListener('click', e => { state.selectedTaskId = e.currentTarget.dataset.taskId; renderTaskDetails(); showHiddenView('details'); })); } else { containers.calendarTasks.innerHTML += `<p class="text-secondary">No hay tareas programadas.</p>`; } }

    function updateZenCircle(progress) { if (!zen.progressRing) return; const circumference = parseFloat(zen.progressRing.style.strokeDasharray); const offset = circumference - progress * circumference; zen.progressRing.style.strokeDashoffset = Math.max(0, offset); }
    function updateBorderClock(p) { if(!zen.borderTop) return; zen.borderTop.style.width = `${Math.min(p * 4, 1) * 100}%`; zen.borderRight.style.height = `${Math.min(Math.max(p * 4 - 1, 0), 1) * 100}%`; zen.borderBottom.style.width = `${Math.min(Math.max(p * 4 - 2, 0), 1) * 100}%`; zen.borderLeft.style.height = `${Math.min(Math.max(p * 4 - 3, 0), 1) * 100}%`; }
    function startZenMode(cycleType = 'pomodoro', cycleCount = 0) { if (zenState.timerId) clearInterval(zenState.timerId); views.zen.classList.add('active'); enterFullscreen(document.documentElement); const radius = 154; const svgSize = 320; zen.progressRing.r.baseVal.value = radius; zen.progressBg.r.baseVal.value = radius; zen.progressRing.setAttribute('cx', svgSize / 2); zen.progressRing.setAttribute('cy', svgSize / 2); zen.progressBg.setAttribute('cx', svgSize / 2); zen.progressBg.setAttribute('cy', svgSize / 2); const circumference = 2 * Math.PI * radius; zen.progressRing.style.strokeDasharray = `${circumference}`; zen.progressRing.style.strokeDashoffset = `${circumference}`; zen.progressRing.style.stroke = state.zenSettings.color; let duration, statusText; switch(cycleType) { case 'shortBreak': duration = state.zenSettings.shortBreak * 60; statusText = 'DESCANSO CORTO'; break; case 'longBreak': duration = state.zenSettings.longBreak * 60; statusText = 'DESCANSO LARGO'; break; default: duration = state.zenSettings.pomodoro * 60; statusText = 'ENFOQUE'; } zen.statusText.textContent = statusText; let timeLeft = duration; zenState.timerId = setInterval(async () => { timeLeft--; const minutes = Math.floor(timeLeft / 60); const seconds = timeLeft % 60; zen.timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`; const progress = (duration - timeLeft) / duration; updateZenCircle(progress); updateBorderClock(progress); if (timeLeft <= 0) { clearInterval(zenState.timerId); if (cycleType === 'pomodoro') { state.gamification.pomodoroCount++; await updateStreak(); await dataService.saveData(state); if (state.currentZenTaskId) showZenLogConfirmation(); const newCycleCount = cycleCount + 1; startZenMode((newCycleCount % 4 === 0) ? 'longBreak' : 'shortBreak', newCycleCount); } else { startZenMode('pomodoro', cycleCount); } } }, 1000); startParticleAnimation(); }
    function stopZenMode() { if (zenState.timerId) clearInterval(zenState.timerId); if (zenState.particleAnimationId) cancelAnimationFrame(zenState.particleAnimationId); views.zen.classList.remove('active'); exitFullscreen(); updateZenCircle(0); updateBorderClock(0); state.currentZenTaskId = null; if (zenState.currentSound) { zenState.currentSound.pause(); zenState.currentSound.currentTime = 0; zenState.currentSound = null; } }
    function showZenLogConfirmation() { const task = state.tasks.find(t => t.id === state.currentZenTaskId); if (!task) return; zen.confirmLogContent.innerHTML = `<h2 class="font-heading text-2xl uppercase mb-4">Sesión Completada</h2><p class="mb-6 text-secondary">¿Registrar ${state.zenSettings.pomodoro} min en la tarea "${task.title}"?</p><div class="flex gap-4"><button id="confirm-log-yes" class="flex-1 btn btn-primary">Sí</button><button id="confirm-log-no" class="flex-1 btn">No</button></div>`; zen.confirmLogModal.classList.add('active'); document.getElementById('confirm-log-yes').onclick = async () => { if (!task.zenSessions) task.zenSessions = []; task.zenSessions.push({ date: new Date().toISOString(), duration: state.zenSettings.pomodoro }); await dataService.saveData(state); zen.confirmLogModal.classList.remove('active'); state.currentZenTaskId = null; }; document.getElementById('confirm-log-no').onclick = () => { zen.confirmLogModal.classList.remove('active'); state.currentZenTaskId = null; }; }
    function startParticleAnimation() { const ctx = zen.canvas.getContext('2d'); let particles = []; zen.canvas.width = window.innerWidth; zen.canvas.height = window.innerHeight; class Particle { constructor() { this.angle = Math.random() * Math.PI * 2; this.radius = 155; this.speed = Math.random() * 0.5 + 0.1; this.size = Math.random() * 2 + 1; this.color = state.zenSettings.color; } update(pulse) { this.radius += this.speed; const pulseEffect = this.radius * (0.15 * pulse); this.x = zen.canvas.width / 2 + Math.cos(this.angle) * (this.radius + pulseEffect); this.y = zen.canvas.height / 2 + Math.sin(this.angle) * (this.radius + pulseEffect); } draw() { ctx.globalAlpha = 1 - (this.radius / (zen.canvas.width / 1.5)); ctx.fillStyle = this.color; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); ctx.globalAlpha = 1; } } for (let i = 0; i < 200; i++) particles.push(new Particle()); function animate() { ctx.clearRect(0, 0, zen.canvas.width, zen.canvas.height); const pulse = (1 + Math.sin(Date.now() / 800)) / 2; for (let i = 0; i < particles.length; i++) { particles[i].update(pulse); particles[i].draw(); if (particles[i].radius > zen.canvas.width / 2) particles.splice(i, 1, new Particle()); } zenState.particleAnimationId = requestAnimationFrame(animate); } animate(); }
    function renderZenSoundControls() { if(!zen.soundSelector) return; zen.soundSelector.innerHTML = sounds.map(s => `<button data-sound-id="${s.id}" class="sound-select-btn w-full text-left p-2 rounded-lg hover:bg-white/10 transition-colors">${s.name}</button>`).join(''); zen.soundSelector.querySelectorAll('.sound-select-btn').forEach(btn => btn.addEventListener('click', () => { const sound = sounds.find(s => s.id === btn.dataset.soundId); if (zenState.currentSound === sound.element) { zenState.currentSound.pause(); zenState.currentSound = null; btn.classList.remove('active'); } else { sounds.forEach(s => s.element.pause()); zenState.currentSound = sound.element; zenState.currentSound.volume = zen.volumeSlider.value; zenState.currentSound.play(); document.querySelectorAll('.sound-select-btn').forEach(b => b.classList.remove('active')); btn.classList.add('active'); } })); }

    // --- EVENT HANDLERS ---
    if(onboarding.form) {
        onboarding.form.addEventListener('submit', async (e) => { e.preventDefault(); const name = onboarding.usernameInput.value.trim(); if(name){ state.userName = name; await dataService.saveData(state); onboarding.commitmentName.textContent = name; onboarding.steps.step1.classList.remove('active'); onboarding.steps.step2.classList.add('active'); } });
        let pressTimer;
        const startPress = (e) => { e.preventDefault(); pressTimer = setTimeout(showTutorial, 2000); onboarding.fingerprintBtn.classList.add('scanning'); };
        const endPress = () => { clearTimeout(pressTimer); onboarding.fingerprintBtn.classList.remove('scanning'); };
        onboarding.fingerprintBtn.addEventListener('mousedown', startPress);
        onboarding.fingerprintBtn.addEventListener('mouseup', endPress);
        onboarding.fingerprintBtn.addEventListener('mouseleave', endPress);
        onboarding.fingerprintBtn.addEventListener('touchstart', startPress);
        onboarding.fingerprintBtn.addEventListener('touchend', endPress);
        
        function showTutorial() {
            onboarding.steps.step2.classList.remove('active');
            onboarding.steps.step3.classList.add('active');
        }

        onboarding.tutorialCards.forEach(card => {
            card.addEventListener('click', () => {
                card.classList.add('dismissed');
            });
        });

        onboarding.startAppBtn.addEventListener('click', async () => {
            await dataService.saveData(state);
            onboarding.ripple.classList.add('animate');
            setTimeout(() => {
                onboarding.container.style.display = 'none';
                mainAppUI.style.display = 'block';
                initApp();
            }, 800);
        });
    }

    if(buttons.fabAddTask) buttons.fabAddTask.addEventListener('click', openNewTaskForm);
    if(buttons.backToDashboard) buttons.backToDashboard.addEventListener('click', () => hideHiddenView('details'));
    if(buttons.editTask) buttons.editTask.addEventListener('click', () => { if (state.selectedTaskId) openEditTaskForm(state.selectedTaskId); });
    if(buttons.cancelForm) buttons.cancelForm.addEventListener('click', () => { hideHiddenView('form'); });
    if(buttons.startZenSession) buttons.startZenSession.addEventListener('click', () => { state.currentZenTaskId = state.selectedTaskId; startZenMode(); });
    if(buttons.dashboardZen) buttons.dashboardZen.addEventListener('click', () => { state.currentZenTaskId = null; startZenMode(); });
    if(buttons.exitZen) buttons.exitZen.addEventListener('click', stopZenMode);
    if(formElements.form) formElements.form.addEventListener('submit', async (e) => { e.preventDefault(); const title = formElements.title.value.trim(); if (!title) return; const tags = formElements.tags.value.split(',').map(t => t.trim()).filter(t => t); const commonData = { title, description: formElements.description.value.trim(), dueDate: formElements.dueDate.value, priority: formElements.priority.value, tags, subtasks: state.tempSubtasks.map((st, i) => ({ id: st.id || `sub-${Date.now()}-${i}`, text: st.text, completed: st.completed || false })) }; if (state.selectedTaskId) { const taskIndex = state.tasks.findIndex(t => t.id === state.selectedTaskId); if (taskIndex > -1) { const originalTask = state.tasks[taskIndex]; state.tasks[taskIndex] = { ...originalTask, ...commonData, completed: commonData.subtasks.length > 0 ? commonData.subtasks.every(st => st.completed) : originalTask.completed, completedAt: (commonData.subtasks.length > 0 && commonData.subtasks.every(st => st.completed)) ? new Date().toISOString() : null }; } } else { state.tasks.push({ ...commonData, id: `task-${Date.now()}`, createdAt: new Date().toISOString(), completed: false, completedAt: null }); } await dataService.saveData(state); hideHiddenView('form'); if (views.details.classList.contains('active')) { renderTaskDetails(); } else { renderDashboard(); } });
    if(buttons.addSubject) buttons.addSubject.addEventListener('click', openNewSubjectForm);
    if(buttons.cancelSubjectForm) buttons.cancelSubjectForm.addEventListener('click', () => showSubjectForm(false));
    if(formElements.subjectForm) formElements.subjectForm.addEventListener('submit', async (e) => { e.preventDefault(); const name = formElements.subjectName.value.trim(); if (!name) return; const subjectData = { name, day: parseInt(formElements.subjectDay.value), startTime: formElements.subjectStartTime.value, endTime: formElements.subjectEndTime.value }; if (state.selectedSubjectId) { const index = state.schedule.findIndex(s => s.id === state.selectedSubjectId); if (index > -1) { const originalSubject = state.schedule[index]; state.schedule[index] = { ...originalSubject, ...subjectData }; } } else { state.schedule.push({ ...subjectData, id: `sub-${Date.now()}`, grades: [] }); } await dataService.saveData(state); showSubjectForm(false); renderSchedule(); });
    if(buttons.calendarPrevMonth) buttons.calendarPrevMonth.addEventListener('click', () => { const d = new Date(state.calendarDate); d.setMonth(d.getMonth() - 1); state.calendarDate = d.toISOString(); renderCalendar(); });
    if(buttons.calendarNextMonth) buttons.calendarNextMonth.addEventListener('click', () => { const d = new Date(state.calendarDate); d.setMonth(d.getMonth() + 1); state.calendarDate = d.toISOString(); renderCalendar(); });
    if(buttons.importData) buttons.importData.addEventListener('click', () => inputs.importFile.click());
    if(inputs.importFile) inputs.importFile.addEventListener('change', importData);
    if(buttons.exportData) buttons.exportData.addEventListener('click', exportData);
    if(buttons.resetApp) buttons.resetApp.addEventListener('click', resetApp);
    if(modal.subtask.addBtnForm) modal.subtask.addBtnForm.addEventListener('click', openSubtaskModal); 
    if(modal.subtask.confirmBtn) modal.subtask.confirmBtn.addEventListener('click', handleAddSubtask); 
    if(modal.subtask.cancelBtn) modal.subtask.cancelBtn.addEventListener('click', closeSubtaskModal);
    if(modal.subtask.input) modal.subtask.input.addEventListener('keydown', e => { if (e.key === 'Enter') handleAddSubtask(); });
    if(buttons.saveWallpaperUrl) buttons.saveWallpaperUrl.addEventListener('click', handleWallpaperUrl);
    if(inputs.wallpaperFile) inputs.wallpaperFile.addEventListener('change', handleWallpaperFile);
    if(buttons.resetWallpaper) buttons.resetWallpaper.addEventListener('click', resetWallpaper);
    if(zen.pomodoroDurationInput) zen.pomodoroDurationInput.addEventListener('change', async (e) => { state.zenSettings.pomodoro = parseInt(e.target.value); await dataService.saveData(state); });
    if(zen.shortBreakDurationInput) zen.shortBreakDurationInput.addEventListener('change', async (e) => { state.zenSettings.shortBreak = parseInt(e.target.value); await dataService.saveData(state); });
    if(zen.longBreakDurationInput) zen.longBreakDurationInput.addEventListener('change', async (e) => { state.zenSettings.longBreak = parseInt(e.target.value); await dataService.saveData(state); });
    if(inputs.colorPicker) inputs.colorPicker.addEventListener('input', async (e) => { state.zenSettings.color = e.target.value; applyAppearance(); await dataService.saveData(state); });
    if(zen.volumeSlider) zen.volumeSlider.addEventListener('input', e => { if (zenState.currentSound) zenState.currentSound.volume = e.target.value; });
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    if(buttons.backToSchedule) buttons.backToSchedule.addEventListener('click', () => hideHiddenView('grades'));
    if(buttons.editSubjectGrades) buttons.editSubjectGrades.addEventListener('click', openEditSubjectForm);
    if(buttons.addGrade) buttons.addGrade.addEventListener('click', () => modal.grade.element.classList.add('active'));
    if(buttons.cancelAddGrade) buttons.cancelAddGrade.addEventListener('click', () => modal.grade.element.classList.remove('active'));
    if(formElements.addGradeForm) formElements.addGradeForm.addEventListener('submit', async (e) => { e.preventDefault(); const subject = state.schedule.find(s => s.id === state.selectedSubjectId); if (subject) { if (!subject.grades) subject.grades = []; subject.grades.push({ name: formElements.gradeNameInput.value, value: parseFloat(formElements.gradeValueInput.value) }); await dataService.saveData(state); renderGrades(); modal.grade.element.classList.remove('active'); formElements.addGradeForm.reset(); } });

    // --- INICIALIZACIÓN ---
    async function initApp() {
        renderDashboard(); 
        setupScrollNavigation();
        if(views.dashboard) views.dashboard.scrollIntoView();
        await checkAchievements();
    }

    applyAppearance();
    renderZenSoundControls();

    if (state.userName) {
        if(mainAppUI) mainAppUI.style.display = 'block';
        if(onboarding.container) onboarding.container.style.display = 'none';
        initApp();
    } else {
        if(mainAppUI) mainAppUI.style.display = 'none';
        if(onboarding.container) onboarding.container.style.display = 'flex';
    }
});
